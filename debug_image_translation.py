#!/usr/bin/env python3
"""
Debug script cho t√≠nh nƒÉng Image Translation
"""

import asyncio
import aiohttp
import os
import time
import hmac
import hashlib
import json
from datetime import datetime
from pathlib import Path

# C·∫•u h√¨nh Aidge API
AIDGE_ACCESS_KEY = "508912"
AIDGE_ACCESS_SECRET = "LvtYlmGSEglYZX5KsaBXI3HHXBPc0jYU"
AIDGE_API_DOMAIN = "api.aidc-ai.com"

def generate_aidge_signature(access_key_secret: str, timestamp: str) -> str:
    """T·∫°o ch·ªØ k√Ω cho Aidge API"""
    h = hmac.new(access_key_secret.encode('utf-8'), 
                 (access_key_secret + timestamp).encode('utf-8'), 
                 hashlib.sha256)
    return h.hexdigest().upper()

async def debug_image_translation():
    """Debug t·ª´ng b∆∞·ªõc c·ªßa image translation"""
    print("üîç Debug Image Translation Process")
    print("=" * 50)
    
    # B∆∞·ªõc 1: T·∫°o file test
    print("\n1Ô∏è‚É£ T·∫°o file test...")
    test_image_path = "debug_test_image.jpg"
    
    # T·∫°o m·ªôt file ·∫£nh test ƒë∆°n gi·∫£n (ho·∫∑c copy t·ª´ file c√≥ s·∫µn)
    if not os.path.exists(test_image_path):
        # T·∫°o file test ƒë∆°n gi·∫£n
        with open(test_image_path, "wb") as f:
            # T·∫°o m·ªôt file ·∫£nh test nh·ªè
            f.write(b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xff\xdb\x00C\x00\x08\x06\x06\x07\x06\x05\x08\x07\x07\x07\t\t\x08\n\x0c\x14\r\x0c\x0b\x0b\x0c\x19\x12\x13\x0f\x14\x1d\x1a\x1f\x1e\x1d\x1a\x1c\x1c $.\' ",#\x1c\x1c(7),01444\x1f\'9=82<.342\xff\xc0\x00\x11\x08\x00\x01\x00\x01\x01\x01\x11\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00\x3f\x00\xaa\xff\xd9')
        print(f"‚úÖ T·∫°o file test: {test_image_path}")
    else:
        print(f"‚úÖ File test ƒë√£ t·ªìn t·∫°i: {test_image_path}")
    
    # B∆∞·ªõc 2: Ki·ªÉm tra th∆∞ m·ª•c translated_images
    print("\n2Ô∏è‚É£ Ki·ªÉm tra th∆∞ m·ª•c translated_images...")
    translated_dir = "translated_images"
    if not os.path.exists(translated_dir):
        os.makedirs(translated_dir)
        print(f"‚úÖ T·∫°o th∆∞ m·ª•c: {translated_dir}")
    else:
        print(f"‚úÖ Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i: {translated_dir}")
    
    # B∆∞·ªõc 3: Test API call
    print("\n3Ô∏è‚É£ Test API call...")
    
    # S·ª≠ d·ª•ng URL ·∫£nh test t·ª´ internet
    test_image_url = "https://ae01.alicdn.com/kf/Sa78257f1d9a34dad8ee494178db12ec8l.jpg"
    
    try:
        # T·∫°o timestamp
        timestamp = str(int(time.time() * 1000))
        
        # T·∫°o ch·ªØ k√Ω
        sign = generate_aidge_signature(AIDGE_ACCESS_SECRET, timestamp)
        
        # URL API
        api_name = "ai/image/translation_mllm"
        url = f"https://{AIDGE_API_DOMAIN}/{api_name}?partner_id=aidge&sign_method=sha256&sign_ver=v2&app_key={AIDGE_ACCESS_KEY}&timestamp={timestamp}&sign={sign}"
        
        # Headers
        headers = {
            "Content-Type": "application/json",
            "x-iop-trial": "true"
        }
        
        # Data
        data = {
            "paramJson": {
                "imageUrl": test_image_url,
                "sourceLanguage": "en",
                "targetLanguage": "vi"
            }
        }
        
        print(f"üì§ URL: {url}")
        print(f"üìã Data: {json.dumps(data, indent=2)}")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data, headers=headers) as response:
                result = await response.json()
                print(f"üì• Status: {response.status}")
                print(f"üì• Response: {json.dumps(result, indent=2)}")
                
                if response.status == 200:
                    res_code = result.get("resCode")
                    if res_code == 200:
                        print("‚úÖ API call successful!")
                        
                        # Debug response structure
                        data = result.get("data", {})
                        print(f"üìä Data structure: {json.dumps(data, indent=2)}")
                        
                        # T√¨m URL ·∫£nh ƒë√£ d·ªãch
                        translated_image_url = None
                        
                        # Th·ª≠ c√°c path kh√°c nhau
                        paths_to_try = [
                            "result.data.structData.message[0].result_list[0].fileUrl",
                            "result.data.structData.message[0].edit_info.repairedUrl",
                            "imageResultList[0].result_list[0].fileUrl"
                        ]
                        
                        for path in paths_to_try:
                            try:
                                current_data = data
                                for key in path.split('.'):
                                    if '[' in key:
                                        key_name, index = key.split('[')
                                        index = int(index.rstrip(']'))
                                        current_data = current_data[key_name][index]
                                    else:
                                        current_data = current_data[key]
                                
                                if current_data:
                                    translated_image_url = current_data
                                    print(f"‚úÖ T√¨m th·∫•y URL t·∫°i path: {path}")
                                    print(f"üñºÔ∏è URL: {translated_image_url}")
                                    break
                            except (KeyError, IndexError, TypeError) as e:
                                print(f"‚ùå Path {path} kh√¥ng t·ªìn t·∫°i: {e}")
                                continue
                        
                        if translated_image_url:
                            # B∆∞·ªõc 4: Download ·∫£nh
                            print("\n4Ô∏è‚É£ Download ·∫£nh ƒë√£ d·ªãch...")
                            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                            translated_filename = f"debug_translated_{timestamp}.jpg"
                            translated_path = os.path.join(translated_dir, translated_filename)
                            
                            async with session.get(translated_image_url) as download_response:
                                if download_response.status == 200:
                                    translated_content = await download_response.read()
                                    with open(translated_path, "wb") as f:
                                        f.write(translated_content)
                                    
                                    print(f"‚úÖ Download th√†nh c√¥ng: {translated_path}")
                                    print(f"üìè File size: {len(translated_content)} bytes")
                                    
                                    # Ki·ªÉm tra file
                                    if os.path.exists(translated_path):
                                        file_size = os.path.getsize(translated_path)
                                        print(f"‚úÖ File saved: {translated_path} ({file_size} bytes)")
                                    else:
                                        print("‚ùå File kh√¥ng ƒë∆∞·ª£c t·∫°o")
                                else:
                                    print(f"‚ùå Download failed: {download_response.status}")
                        else:
                            print("‚ùå Kh√¥ng t√¨m th·∫•y URL ·∫£nh ƒë√£ d·ªãch")
                    else:
                        error_message = result.get("resMessage", "Unknown error")
                        print(f"‚ùå API Error: {error_message}")
                else:
                    print(f"‚ùå HTTP Error: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        import traceback
        traceback.print_exc()

async def debug_web_endpoint():
    """Debug web endpoint"""
    print("\nüåê Debug Web Endpoint")
    print("=" * 30)
    
    # Test endpoint c√≥ ho·∫°t ƒë·ªông kh√¥ng
    try:
        async with aiohttp.ClientSession() as session:
            # Test GET endpoint
            async with session.get("http://localhost:8000/image_translation") as response:
                print(f"üì• GET /image_translation: {response.status}")
                if response.status == 200:
                    content = await response.text()
                    print(f"‚úÖ Page loaded successfully ({len(content)} characters)")
                else:
                    print(f"‚ùå Failed to load page: {response.status}")
            
            # Test POST endpoint v·ªõi file test
            if os.path.exists("debug_test_image.jpg"):
                print("\nüì§ Testing POST /translate_image...")
                
                # T·∫°o form data
                data = aiohttp.FormData()
                data.add_field('image', 
                             open("debug_test_image.jpg", 'rb'),
                             filename="debug_test_image.jpg",
                             content_type='image/jpeg')
                data.add_field('source_language', 'en')
                data.add_field('target_language', 'vi')
                
                async with session.post("http://localhost:8000/translate_image", data=data) as response:
                    print(f"üì• POST /translate_image: {response.status}")
                    if response.status == 200:
                        result = await response.json()
                        print(f"‚úÖ Response: {json.dumps(result, indent=2)}")
                    else:
                        error_text = await response.text()
                        print(f"‚ùå Error: {error_text}")
            else:
                print("‚ùå Test image file not found")
                
    except Exception as e:
        print(f"‚ùå Web endpoint test failed: {e}")

async def main():
    """Main debug function"""
    print("üöÄ Starting Image Translation Debug")
    print("=" * 50)
    
    # Debug API
    #await debug_image_translation()
    
    # Debug web endpoint
    await debug_web_endpoint()
    
    print("\nüéâ Debug completed!")

if __name__ == "__main__":
    asyncio.run(main()) 